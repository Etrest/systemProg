//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp1.ServiceforKurs
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ServiceforKurs.IClient_server", CallbackContract = typeof(WpfApp1.ServiceforKurs.IClient_serverCallback))]
    public interface IClient_server
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IClient_server/Connect", ReplyAction = "http://tempuri.org/IClient_server/ConnectResponse")]
        int Connect(string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IClient_server/Connect", ReplyAction = "http://tempuri.org/IClient_server/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IClient_server/Disconnect", ReplyAction = "http://tempuri.org/IClient_server/DisconnectResponse")]
        void Disconnect(int id);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IClient_server/Disconnect", ReplyAction = "http://tempuri.org/IClient_server/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IClient_server/SendMessage")]
        void SendMessage(string msg, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IClient_server/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string msg, int id);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClient_serverCallback
    {

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IClient_server/MessageCallBack")]
        void MessageCallBack(string msg);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClient_serverChannel : WpfApp1.ServiceforKurs.IClient_server, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Client_serverClient : System.ServiceModel.DuplexClientBase<WpfApp1.ServiceforKurs.IClient_server>, WpfApp1.ServiceforKurs.IClient_server
    {

        public Client_serverClient(System.ServiceModel.InstanceContext callbackInstance) :
                base(callbackInstance)
        {
        }

        public Client_serverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
                base(callbackInstance, endpointConfigurationName)
        {
        }

        public Client_serverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public Client_serverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public Client_serverClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, binding, remoteAddress)
        {
        }

        public int Connect(string name)
        {
            return base.Channel.Connect(name);
        }

        public System.Threading.Tasks.Task<int> ConnectAsync(string name)
        {
            return base.Channel.ConnectAsync(name);
        }

        public void Disconnect(int id)
        {
            base.Channel.Disconnect(id);
        }

        public System.Threading.Tasks.Task DisconnectAsync(int id)
        {
            return base.Channel.DisconnectAsync(id);
        }

        public void SendMessage(string msg, int id)
        {
            base.Channel.SendMessage(msg, id);
        }

        public System.Threading.Tasks.Task SendMessageAsync(string msg, int id)
        {
            return base.Channel.SendMessageAsync(msg, id);
        }
    }
}
